{
  "_args": [
    [
      {
        "raw": "fake-http-request@https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
        "scope": null,
        "escapedName": "fake-http-request",
        "name": "fake-http-request",
        "rawSpec": "https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
        "spec": "https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
        "type": "remote"
      },
      "C:\\Users\\prath\\Google Drive\\SBOI\\southbendvotingbot\\node_modules\\claudia-bot-builder"
    ]
  ],
  "_from": "fake-http-request@https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
  "_id": "fake-http-request@1.4.0",
  "_inCache": true,
  "_location": "/claudia-bot-builder/fake-http-request",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fake-http-request@https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
    "scope": null,
    "escapedName": "fake-http-request",
    "name": "fake-http-request",
    "rawSpec": "https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
    "spec": "https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [],
  "_resolved": "https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
  "_shasum": "b54ad19f15b8843c576bfb87fba9d13c82bfe56b",
  "_shrinkwrap": null,
  "_spec": "fake-http-request@https://registry.npmjs.org/fake-http-request/-/fake-http-request-1.4.0.tgz",
  "_where": "C:\\Users\\prath\\Google Drive\\SBOI\\southbendvotingbot\\node_modules\\claudia-bot-builder",
  "author": {
    "name": "Gojko Adzic",
    "email": "gojko@gojko.com"
  },
  "bugs": {
    "url": "https://github.com/gojko/fake-http-request/issues"
  },
  "dependencies": {},
  "description": "Utility class to fake HTTP/HTTPS requests for unit testing Node.js projects. It captures arguments for outgoing requests and allows you to simulate network errors and responses easily.",
  "devDependencies": {
    "jasmine": "^2.4.1",
    "jasmine-spec-reporter": "^2.4.0",
    "request": "^2.72.0"
  },
  "homepage": "https://github.com/gojko/fake-http-request",
  "keywords": [
    "http",
    "https",
    "request",
    "post",
    "rest",
    "unit testing",
    "mock"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "fake-http-request",
  "optionalDependencies": {},
  "readme": "# Fake Node.js HTTP Request \n\n[![Build status](https://travis-ci.org/gojko/fake-http-request.svg?v=1)](https://travis-ci.org/gojko/fake-http-request) \n\nUtility class to fake a HTTP/HTTPS request for unit testing Node.js projects. It captures arguments for outgoing requests and allows you to simulate network errors and responses easily. It can also pipe outgoing HTTP/S requests to custom functions, so you can asynchronously wait for them.\n\n[![NPM](https://nodei.co/npm/fake-http-request.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/fake-http-request/)`\n\n## Installation\n\nInstall using NPM, with \n\n```\nnpm install fake-http-request -D\n```\n\n## Usage\n\nBefore the relevant HTTP/S requests, install the fake request:\n\n```javascript\nvar fake = require('fake-http-request');\n\nfake.install('https');\n\n```\n\nTo clean up and restore the original HTTP/S requests, after testing, use:\n\n```javascript\nfake.uninstall('https');\n```\n\nThis will replace the system `https.request` with a test method that captures calls instead of sending them out to the network, so it will work with any client code that uses the system http/https libraries.\n\nBoth `install` and `uninstall` can take an argument -- the module name where to install the fake requests. By default, they will use `https`.\n\nYou can then use `https.request.calls` to inspect individual calls. Each call object will have the following structure:\n\n* `args`: `array` -- arguments passed to the request\n* `body`: `array` -- chunks written to the request body\n* `networkError`: `function (error)` -- use this to simulate a network error for the call.\n* `respond`: `function(httpCode, statusMessage, body)` -- use this to simulate a successful network response.\n\nYou can also use `https.request.pipe` to pass in a function that will receive a call every time a network request is initiated. The call is executed using `setTimeout` so you can also respond, knowing that the synchronous processing of the calling function is complete. The arguments to the pipe will be the arguments passed to the HTTP call, and `this` will be set to the fake request. \n\n### Example\n\n```javascript\nvar fakeRequest = require('fake-http-request'),\n    https = require('https'),\n    request = require('request');\n\nfakeRequest.install();\n\n// simulate a response\n\nrequest('https://www.google.com', function (error, response, body) { \n  console.log('got response', response.statusCode, response.statusMessage, body) \n}).on('request', function () {\n  console.log('number of calls', https.request.calls.length);\n  console.log('first call', \n\thttps.request.calls[0].args[0].host, \n\thttps.request.calls[0].args[0].port, \n\thttps.request.calls[0].args[0].path\n  );\n\n  https.request.calls[0].respond(404, 'Not found', 'some html here');\n});\n\n// simulate errors\n\ncall = request('https://www.google.com', function (error, response, body) { \n  console.log('got error', error); \n}).on('request', function () {\n  var mostRecent = https.request.calls.length - 1;\n  console.log('number of calls', https.request.calls.length);\n  console.log('second call', \n    https.request.calls[mostRecent].args[0].host,\n\thttps.request.calls[mostRecent].args[0].port, \n\thttps.request.calls[mostRecent].args[0].path\n  );\n  https.request.calls[mostRecent].networkError('BOOM!');\n});\n\n// pipe calls for async processing\n\nhttps.request.pipe(function (options) {\n  console.log('Received call', options); \n  this.respond(200, 'OK', 'some html here');\n});\n\nrequest('https://www.google.com');\n```\n\n### Usage with domain matchers\n\nIn case you want to block just a certain URLs, you can pass an object with request type (`type`) and regex matcher to the `install` method. If matcher is not provided, `fake-http-request` will match all URLs. Request type is optional and it defaults to `https`.\n\nFor example, this will fake only requests made to Github URL via HTTPS:\n\n```javascript\nvar fakeRequest = require('fake-http-request');\n\nfakeRequest.install({\n  type: 'https',\n  matcher: /github/\n});\n\n// Do something with fake requests\n\nfakeRequest.uninstall('https');\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gojko/fake-http-request.git"
  },
  "scripts": {
    "test": "node spec/support/jasmine-runner.js"
  },
  "version": "1.4.0"
}
